---
description:
globs:
alwaysApply: true
---
# Master Process System to Follow

**Purpose**
Update the existing pipeline while preserving all prior constraints and code style. Incorporate new tasks in-place, no forks, no placeholders. Maintain determinism, contracts, and idempotency across modules and tests.

---

### Inputs (you fill these each run)

* **Project summary (1–2 lines):**
  Example: “Deterministic text-layer feature-based span extractor for invoices; modular pipeline with ingest → tokenize → candidates → decode → emit → report.”

* **Original invariants to preserve:**

  * No OCR/vision, no templates/regex.
  * Deterministic tokens/candidates; idempotent ingest.
  * Contracts frozen (`contract_version=v1`, etc.).
  * Same repo layout (`src/invoices/*`, `scripts/run_pipeline.py`).
  * Provenance on every predicted field.
  * All tests (`idempotency`, `token_determinism`, `candidate_bounds`, `contract_integrity`, `review_queue`) stay green.

* **New task to add:**
  (One paragraph description)

* **Acceptance checks:**

  * Which tests or CLI outputs must pass.
  * Deterministic behaviors to confirm.

---

### Protocol (agent must follow in order)

1. **Survey** – Identify files/functions impacted. Print a 5-line impact plan naming exact paths.
2. **Continuity check** – Restate how original invariants will remain intact. If any tension, propose minimal adjustment.
3. **Implement** – Edit in place, no `_v2` or stubs. Keep signatures/contracts stable.
4. **Tests** – Run full suite (`pytest -q`). Add only minimal new tests if coverage gap.
5. **Self-audit** – Produce traceability matrix: line edits → rationale (orig feedback vs new task) → covering test.
6. **Verify** – Show CLI/test outputs proving acceptance checks.
7. **Commit** – One atomic commit; no format-only churn.

---

### Output Requirements

* **Impact plan** (5 lines, concrete).
* **Continuity rationale** (bullets showing invariants preserved).
* **Diff summary** (per hunk: why, not just what).
* **Traceability matrix**.
* **Verification transcript** (pytest/CLI outputs).
* **Commit message**:

```
<scope>: <concise action> while preserving <invariant>

Why:
- Link each change to original feedback + new task

What changed:
- file:path — one-line summary

QA:
- Tests covering change
- Determinism/idempotency checks passed
- Acceptance criteria met
```

---

### Guardrails

* No placeholders/TODOs.
* No duplicate or renamed files.
* No silent schema/contract drift.
* No randomness without seed tied to SHA256.
* No speculative stubs.

---

### Reuse Variants

* **Delta Prompt** (for small iterations): list context deltas + do-not-regress + micro-task + acceptance.
* **Micro-Fix** (for one bug): state defect + keep signature stable + one test proves fix.

---

This way every edit is constrained to:

* **Preserve** the “solid spine” you’ve already locked.
* **Integrate** new labeling/training or connectors without churn.
* **Prove** correctness via explicit invariants and tests.
